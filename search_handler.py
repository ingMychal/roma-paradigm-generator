"""
This module provides functions to search for words in the xml file.

Functions:
    - clean_text(text): Clean and normalize text for comparison.
    - replace_special_characters(word): Replace special characters in a word.
    - get_pos_category(pos_rom): Determine part of speech category.
    - get_gender_category(pos_rom): Determine gender category.
    - search_word(search_term): Search for a word in the XML file and return information about it.
"""


from xml_parser import parse_xml_data

def clean_text(text):
    """Clean and normalize text, removing invisible characters."""
    cleaned_text = text.lower().replace('\n', '').replace('\t', '').replace('\r', '').replace('\u00a0', ' ')
    return cleaned_text.strip()  # Remove leading and trailing spaces

def replace_special_characters(word):
    """Replace special characters in a word."""
    translation_table = str.maketrans("čťľšžýáíéóúŕäôĺňď", "ctlszyaieouraolnd")
    return word.translate(translation_table)

def get_pos_category(pos_rom):
    """Determine part of speech category."""
    if "sloveso" in pos_rom:
        return "verb"
    elif "podstatné meno" in pos_rom:
        return "noun"
    else:
        return "other"
    
def get_gender_category(pos_rom):
    """Determine gender category."""
    if "ženský" in pos_rom:
        return "feminine"
    elif "mužský" in pos_rom:
        return "masculine"
    else:
        return "other"

def search_word(search_term):
    """Search for a word in the XML file and return information about it."""
    try:
        # Search for a word in the dictionary
        # First parse the XML
        root = parse_xml_data()
        search_term = clean_text(search_term)

        # Get the list of sense entries generated by xml_parser.py
        sense_entries = root.findall('.//Sense')

        # Iterate through the sense entries
        for sense_element in sense_entries:
            # Find the lemmaROM within the current Sense
            lemmaROM_elem = sense_element.find('./Definition/lemmaROM')
            if lemmaROM_elem is not None:
                lemma_rom = clean_text(lemmaROM_elem.text)

                # Compare search_term and lemma_rom
                if replace_special_characters(search_term) == replace_special_characters(lemma_rom):
                    posROM_elem = sense_element.find('./posROM')
                    # Check if pos_rom_element exists and has text attribute before accessing it
                    if posROM_elem is not None and posROM_elem.text is not None:
                        pos_rom = clean_text(posROM_elem.text)
                        part_of_speech = get_pos_category(pos_rom)
                        gender = get_gender_category(pos_rom)

                        # Construct the search result message
                        result_message = {
                            "word": lemma_rom,
                            "part_of_speech": part_of_speech,
                            "gender": gender
                        }

                        return result_message
                    else:
                        # Handle the case where pos_rom_element or pos_rom_element.text is None
                        raise ValueError(f"No valid posROM element found for '{lemma_rom}'.")
                               
        # If the word is not found, set an appropriate message and return
        result_message = f"Ma ruš! We do not have '{search_term}' in our dictionary."
        return result_message

    except Exception as e:
        # Handle exceptions, log the error, and provide a meaningful message to the user
        error_message = f"An error occurred: {str(e)}"
        return error_message

if __name__ == "__main__":
    result = search_word('čambel')
    print(result)
